{"paragraphs":[{"text":"%md\n# COGNITIVO.AI - Teste Técnico\n\n## Considerações sobre o ambiente de trabalho\nUtilizei o notebook Apache Zeppelin 0.8.2, instalado localmente em ambiente Windows 10. Já trabalhei com Jupyter e Colaboratory, mas ultimamente uso intensamente o Zeppelin devido a sua flexibilidade com os interpretadores (utilizei o intepretador Spark). Meu ambiente de trabalho contou ainda com Java 1.8.0_221, Python 3.6.5 e Spark 2.4.5 (utilizei Pyspark).\n\n\n## Requisitos\n1. Conversão do formato dos arquivos: Converter o arquivo CSV presente no diretório data/input/users/load.csv, para um formato colunar de alta performance de leitura de sua escolha. Justificar brevemente a escolha do formato; \n*R. Utilizei o formato PARQUET, por diversas vantagens: ele é um formato colunar, binário e que contém o metadado de seu conteúdo. Então, mesmo sem ler o conteúdo do arquivo, o Spark pode saber sobre nome das colunas, tipos de dados, enconding, taxa de compressão alta, etc. Este formato é otimizado para o paradigma WORM (Write Once Read Many). Tem baixo custo de I/O e pode ser configurado para altas taxas de compressão, utilizando pouco espaço do disco.*\n\n2. Deduplicação dos dados convertidos: No conjunto de dados convertidos haverão múltiplas entradas para um mesmo registro, variando apenas os valores de alguns dos campos entre elas. Será necessário realizar um processo de deduplicação destes dados, a fim de apenas manter a última entrada de cada registro, usando como referência o id para identificação dos registros duplicados e a data de atualização (update_date) para definição do registro mais recente;\n\n3. Conversão do tipo dos dados deduplicados: No diretório config haverá um arquivo JSON de configuração (types_mapping.json), contendo os nomes dos campos e os respectivos tipos desejados de output. Utilizando esse arquivo como input, realizar um processo de conversão dos tipos dos campos descritos, no conjunto de dados deduplicados;\n\n## Notas gerais\n- Todas as operações devem ser realizadas utilizando Spark. O serviço de execução fica a seu critério, podendo utilizar tanto serviços locais como serviços em cloud. Justificar brevemente o serviço escolhido (EMR, Glue, Zeppelin, etc.).\n\n- Cada operação deve ser realizada no dataframe resultante do passo anterior, podendo ser persistido e carregado em diferentes conjuntos de arquivos após cada etapa ou executados em memória e apenas persistido após operação final.\n\n- Você tem liberdade p/ seguir a sequência de execução desejada;\n\n- Solicitamos a transformação de tipos de dados apenas de alguns campos. Os outros ficam a seu critério\n\n- O arquivo ou o conjunto de arquivos finais devem ser compactados e enviados por e-mail.\n","user":"anonymous","dateUpdated":"2020-06-21T02:31:30-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>COGNITIVO.AI - Teste Técnico</h1>\n<h2>Considerações sobre o ambiente de trabalho</h2>\n<p>Utilizei o notebook Apache Zeppelin 0.8.2, instalado localmente em ambiente Windows 10. Já trabalhei com Jupyter e Colaboratory, mas ultimamente uso intensamente o Zeppelin devido a sua flexibilidade com os interpretadores (utilizei o intepretador Spark). Meu ambiente de trabalho contou ainda com Java 1.8.0_221, Python 3.6.5 e Spark 2.4.5 (utilizei Pyspark).</p>\n<h2>Requisitos</h2>\n<ol>\n  <li>\n  <p>Conversão do formato dos arquivos: Converter o arquivo CSV presente no diretório data/input/users/load.csv, para um formato colunar de alta performance de leitura de sua escolha. Justificar brevemente a escolha do formato;<br/><em>R. Utilizei o formato PARQUET, por diversas vantagens: ele é um formato colunar, binário e que contém o metadado de seu conteúdo. Então, mesmo sem ler o conteúdo do arquivo, o Spark pode saber sobre nome das colunas, tipos de dados, enconding, taxa de compressão alta, etc. Este formato é otimizado para o paradigma WORM (Write Once Read Many). Tem baixo custo de I/O e pode ser configurado para altas taxas de compressão, utilizando pouco espaço do disco.</em></p></li>\n  <li>\n  <p>Deduplicação dos dados convertidos: No conjunto de dados convertidos haverão múltiplas entradas para um mesmo registro, variando apenas os valores de alguns dos campos entre elas. Será necessário realizar um processo de deduplicação destes dados, a fim de apenas manter a última entrada de cada registro, usando como referência o id para identificação dos registros duplicados e a data de atualização (update_date) para definição do registro mais recente;</p></li>\n  <li>\n  <p>Conversão do tipo dos dados deduplicados: No diretório config haverá um arquivo JSON de configuração (types_mapping.json), contendo os nomes dos campos e os respectivos tipos desejados de output. Utilizando esse arquivo como input, realizar um processo de conversão dos tipos dos campos descritos, no conjunto de dados deduplicados;</p></li>\n</ol>\n<h2>Notas gerais</h2>\n<ul>\n  <li>\n  <p>Todas as operações devem ser realizadas utilizando Spark. O serviço de execução fica a seu critério, podendo utilizar tanto serviços locais como serviços em cloud. Justificar brevemente o serviço escolhido (EMR, Glue, Zeppelin, etc.).</p></li>\n  <li>\n  <p>Cada operação deve ser realizada no dataframe resultante do passo anterior, podendo ser persistido e carregado em diferentes conjuntos de arquivos após cada etapa ou executados em memória e apenas persistido após operação final.</p></li>\n  <li>\n  <p>Você tem liberdade p/ seguir a sequência de execução desejada;</p></li>\n  <li>\n  <p>Solicitamos a transformação de tipos de dados apenas de alguns campos. Os outros ficam a seu critério</p></li>\n  <li>\n  <p>O arquivo ou o conjunto de arquivos finais devem ser compactados e enviados por e-mail.</p></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1592534685811_-478924492","id":"20200618-234445_1993730643","dateCreated":"2020-06-18T23:44:45-0300","dateStarted":"2020-06-21T02:31:31-0300","dateFinished":"2020-06-21T02:31:32-0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20772"},{"text":"%md\n## Pré-requisitos\nInicialização do objeto SparkSession","user":"anonymous","dateUpdated":"2020-06-21T02:31:32-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Pré-requisitos</h2>\n<p>Inicialização do objeto SparkSession</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1592535931526_175863180","id":"20200619-000531_702052827","dateCreated":"2020-06-19T00:05:31-0300","dateStarted":"2020-06-21T02:31:33-0300","dateFinished":"2020-06-21T02:31:33-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20773"},{"text":"%spark.pyspark\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession \\\n    .builder \\\n    .appName(\"teste_tecnico_cognito_ai\") \\\n    .getOrCreate()\n\nsc = spark.sparkContext","user":"anonymous","dateUpdated":"2020-06-21T02:31:33-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592535985615_-368536311","id":"20200619-000625_1538523894","dateCreated":"2020-06-19T00:06:25-0300","dateStarted":"2020-06-21T02:31:33-0300","dateFinished":"2020-06-21T02:31:33-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20774"},{"text":"%md\n## Requisito 1\nConversão do formato dos arquivos: Converter o arquivo CSV presente no diretório data/input/users/load.csv, para um formato colunar de alta performance de leitura de sua escolha. Justificar brevemente a escolha do formato;\n","user":"anonymous","dateUpdated":"2020-06-21T02:31:33-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Requisito 1</h2>\n<p>Conversão do formato dos arquivos: Converter o arquivo CSV presente no diretório data/input/users/load.csv, para um formato colunar de alta performance de leitura de sua escolha. Justificar brevemente a escolha do formato;</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1592534920735_-1839299070","id":"20200618-234840_887049383","dateCreated":"2020-06-18T23:48:40-0300","dateStarted":"2020-06-21T02:31:34-0300","dateFinished":"2020-06-21T02:31:34-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20775"},{"text":"%md\n### Lendo o arquivo bruto","user":"anonymous","dateUpdated":"2020-06-21T02:31:34-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Lendo o arquivo bruto</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592539395086_-393146877","id":"20200619-010315_2140076775","dateCreated":"2020-06-19T01:03:15-0300","dateStarted":"2020-06-21T02:31:34-0300","dateFinished":"2020-06-21T02:31:34-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20776"},{"text":"%spark.pyspark\n\npath_input_1 = 'C:\\\\Projetos\\\\teste_cognitivo_ai\\\\data\\\\input\\\\users\\\\load.csv'\nusers_raw_DF = spark.read.load(path_input_1,format=\"csv\", sep=\",\", inferSchema=\"true\", header=\"true\")\nusers_raw_DF.show(truncate=False)\nusers_raw_DF.printSchema()\n\n","user":"anonymous","dateUpdated":"2020-06-21T02:31:34-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|id |name                              |email                |phone          |address                                       |age|create_date            |update_date            |\n+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9997|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-03-03 18:47:01.954|\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9998|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-04-14 17:09:48.558|\n|2  |sherlock.holmes@cognitivo.ai      |Sherlock Holmes      |(11) 94815-1623|221B Baker Street, London, UK                 |34 |2018-04-21 20:21:24.364|2018-04-21 20:21:24.364|\n|3  |spongebob.squarepants@cognitivo.ai|Spongebob Squarepants|(11) 91234-5678|124 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 04:07:06.854|\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9999|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-05-23 10:13:59.594|\n|3  |spongebob.squarepants@cognitivo.ai|Spongebob Squarepants|(11) 98765-4321|122 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 05:08:07.964|\n+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n\nroot\n |-- id: integer (nullable = true)\n |-- name: string (nullable = true)\n |-- email: string (nullable = true)\n |-- phone: string (nullable = true)\n |-- address: string (nullable = true)\n |-- age: integer (nullable = true)\n |-- create_date: timestamp (nullable = true)\n |-- update_date: timestamp (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1592534581387_2139160324","id":"20200618-234301_1708848733","dateCreated":"2020-06-18T23:43:01-0300","dateStarted":"2020-06-21T02:31:35-0300","dateFinished":"2020-06-21T02:31:59-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20777"},{"text":"%md\n### Exibindo na ordem correta as colunas 'name' e 'email'\n","user":"anonymous","dateUpdated":"2020-06-21T02:31:59-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Exibindo na ordem correta as colunas &lsquo;name&rsquo; e &lsquo;email&rsquo;</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592539432868_907402809","id":"20200619-010352_1447178593","dateCreated":"2020-06-19T01:03:52-0300","dateStarted":"2020-06-21T02:31:59-0300","dateFinished":"2020-06-21T02:31:59-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20778"},{"text":"%spark.pyspark\nfrom pyspark.sql.functions import col\n\nusers_raw_fixed_DF = users_raw_DF \\\n    .select( \\\n        col(\"id\"), \\\n        col(\"name\").alias(\"email\"), \\\n        col(\"email\").alias(\"name\"), \\\n        col(\"phone\"), \\\n        col(\"address\"), \\\n        col(\"age\"), \\\n        col(\"create_date\"), \\\n        col(\"update_date\"))\nusers_raw_fixed_DF.show(truncate=False)\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:00-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|id |email                             |name                 |phone          |address                                       |age|create_date            |update_date            |\n+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9997|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-03-03 18:47:01.954|\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9998|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-04-14 17:09:48.558|\n|2  |sherlock.holmes@cognitivo.ai      |Sherlock Holmes      |(11) 94815-1623|221B Baker Street, London, UK                 |34 |2018-04-21 20:21:24.364|2018-04-21 20:21:24.364|\n|3  |spongebob.squarepants@cognitivo.ai|Spongebob Squarepants|(11) 91234-5678|124 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 04:07:06.854|\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9999|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-05-23 10:13:59.594|\n|3  |spongebob.squarepants@cognitivo.ai|Spongebob Squarepants|(11) 98765-4321|122 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 05:08:07.964|\n+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592535113965_-402230511","id":"20200618-235153_396819119","dateCreated":"2020-06-18T23:51:53-0300","dateStarted":"2020-06-21T02:32:00-0300","dateFinished":"2020-06-21T02:32:05-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20779"},{"text":"%md\n### Salvando no disco local no formato PARQUET\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:05-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Salvando no disco local no formato PARQUET</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592540401337_-1915538823","id":"20200619-012001_16120852","dateCreated":"2020-06-19T01:20:01-0300","dateStarted":"2020-06-21T02:32:05-0300","dateFinished":"2020-06-21T02:32:06-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20780"},{"text":"%spark.pyspark\npath_output_1 = 'C:\\\\Projetos\\\\teste_cognitivo_ai\\\\data\\\\output\\\\1'\nusers_raw_fixed_DF.write.parquet(path_output_1)\n\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:06-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592538902940_-855391691","id":"20200619-005503_304388493","dateCreated":"2020-06-19T00:55:03-0300","dateStarted":"2020-06-21T02:32:06-0300","dateFinished":"2020-06-21T02:32:17-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20781"},{"text":"%md\n## Requisito 2\nDeduplicação dos dados convertidos: No conjunto de dados convertidos haverão múltiplas entradas para um mesmo registro, variando apenas os valores de alguns dos campos entre elas. Será necessário realizar um processo de deduplicação destes dados, a fim de apenas manter a última entrada de cada registro, usando como referência o id para identificação dos registros duplicados e a data de atualização (update_date) para definição do registro mais recente;\n\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:17-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Requisito 2</h2>\n<p>Deduplicação dos dados convertidos: No conjunto de dados convertidos haverão múltiplas entradas para um mesmo registro, variando apenas os valores de alguns dos campos entre elas. Será necessário realizar um processo de deduplicação destes dados, a fim de apenas manter a última entrada de cada registro, usando como referência o id para identificação dos registros duplicados e a data de atualização (update_date) para definição do registro mais recente;</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1592585766289_63381206","id":"20200619-135606_511439282","dateCreated":"2020-06-19T13:56:06-0300","dateStarted":"2020-06-21T02:32:17-0300","dateFinished":"2020-06-21T02:32:18-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20782"},{"text":"%spark.pyspark\npath_input_2 = path_output_1\nusers_parquet_DF = spark.read.load(path_input_2,format=\"parquet\")\nusers_parquet_DF.show(truncate=False)\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:18-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|id |email                             |name                 |phone          |address                                       |age|create_date            |update_date            |\n+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9997|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-03-03 18:47:01.954|\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9998|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-04-14 17:09:48.558|\n|2  |sherlock.holmes@cognitivo.ai      |Sherlock Holmes      |(11) 94815-1623|221B Baker Street, London, UK                 |34 |2018-04-21 20:21:24.364|2018-04-21 20:21:24.364|\n|3  |spongebob.squarepants@cognitivo.ai|Spongebob Squarepants|(11) 91234-5678|124 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 04:07:06.854|\n|1  |david.lynch@cognitivo.ai          |David Lynch          |(11) 99999-9999|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-05-23 10:13:59.594|\n|3  |spongebob.squarepants@cognitivo.ai|Spongebob Squarepants|(11) 98765-4321|122 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 05:08:07.964|\n+---+----------------------------------+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592540593755_2098035324","id":"20200619-012313_1417470516","dateCreated":"2020-06-19T01:23:13-0300","dateStarted":"2020-06-21T02:32:20-0300","dateFinished":"2020-06-21T02:32:27-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20783"},{"text":"%md\n### Criando tabelas temporárias e executando o join entre elas para gerar a tabela com dados deduplicados\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:27-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Criando tabelas temporárias e executando o join entre elas para gerar a tabela com dados deduplicados</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592603815798_-1896526381","id":"20200619-185655_2130135848","dateCreated":"2020-06-19T18:56:55-0300","dateStarted":"2020-06-21T02:32:27-0300","dateFinished":"2020-06-21T02:32:27-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20784"},{"text":"%spark.pyspark\nusers_parquet_DF.createOrReplaceTempView('users')","user":"anonymous","dateUpdated":"2020-06-21T02:32:27-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592602850201_2041504301","id":"20200619-184050_1152881581","dateCreated":"2020-06-19T18:40:50-0300","dateStarted":"2020-06-21T02:32:28-0300","dateFinished":"2020-06-21T02:32:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20785"},{"text":"%spark.pyspark\nmost_recent_date_DF = spark.sql('SELECT users.id, max(users.update_date) as most_recent_date FROM users GROUP BY users.id ')\nmost_recent_date_DF.orderBy('users.id').show(truncate=False)\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:30-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-----------------------+\n|id |most_recent_date       |\n+---+-----------------------+\n|1  |2018-05-23 10:13:59.594|\n|2  |2018-04-21 20:21:24.364|\n|3  |2018-05-19 05:08:07.964|\n+---+-----------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592586336214_-717802361","id":"20200619-140536_1297623822","dateCreated":"2020-06-19T14:05:36-0300","dateStarted":"2020-06-21T02:32:32-0300","dateFinished":"2020-06-21T02:32:48-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20786"},{"text":"%spark.pyspark\nmost_recent_date_DF.createOrReplaceTempView('most_recent_date')\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:48-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592595173938_-889754944","id":"20200619-163253_1250700800","dateCreated":"2020-06-19T16:32:53-0300","dateStarted":"2020-06-21T02:32:50-0300","dateFinished":"2020-06-21T02:32:52-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20787"},{"text":"%spark.pyspark\nusers_deduplicated_DF = spark.sql('SELECT '+\n    'u.id, u.name, u.phone, u.address, u.age, u.create_date, u.update_date FROM users u ' +\n    'JOIN most_recent_date mrd ON mrd.most_recent_date = u.update_date').orderBy(\"u.id\")\nusers_deduplicated_DF.show(truncate=False)\n","user":"anonymous","dateUpdated":"2020-06-21T02:32:52-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|id |name                 |phone          |address                                       |age|create_date            |update_date            |\n+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|1  |David Lynch          |(11) 99999-9999|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-05-23 10:13:59.594|\n|2  |Sherlock Holmes      |(11) 94815-1623|221B Baker Street, London, UK                 |34 |2018-04-21 20:21:24.364|2018-04-21 20:21:24.364|\n|3  |Spongebob Squarepants|(11) 98765-4321|122 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 05:08:07.964|\n+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592587558589_-2071378215","id":"20200619-142558_375926777","dateCreated":"2020-06-19T14:25:58-0300","dateStarted":"2020-06-21T02:32:52-0300","dateFinished":"2020-06-21T02:33:02-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20788"},{"text":"%md\n### Salvando no disco local a tabela com dados deduplicados","user":"anonymous","dateUpdated":"2020-06-21T02:33:03-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Salvando no disco local a tabela com dados deduplicados</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592603698067_-1749277847","id":"20200619-185458_857550698","dateCreated":"2020-06-19T18:54:58-0300","dateStarted":"2020-06-21T02:33:03-0300","dateFinished":"2020-06-21T02:33:04-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20789"},{"text":"%spark.pyspark\npath_output_2 = 'C:\\\\Projetos\\\\teste_cognitivo_ai\\\\data\\\\output\\\\2'\nusers_deduplicated_DF.write.parquet(path_output_2)\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:04-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592594016573_-691518107","id":"20200619-161336_1297485511","dateCreated":"2020-06-19T16:13:36-0300","dateStarted":"2020-06-21T02:33:04-0300","dateFinished":"2020-06-21T02:33:19-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20790","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n## Requisito 3\nConversão do tipo dos dados deduplicados: No diretório config haverá um arquivo JSON de configuração (types_mapping.json), contendo os nomes dos campos e os respectivos tipos desejados de output. Utilizando esse arquivo como input, realizar um processo de conversão dos tipos dos campos descritos, no conjunto de dados deduplicados;\n\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:19-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Requisito 3</h2>\n<p>Conversão do tipo dos dados deduplicados: No diretório config haverá um arquivo JSON de configuração (types_mapping.json), contendo os nomes dos campos e os respectivos tipos desejados de output. Utilizando esse arquivo como input, realizar um processo de conversão dos tipos dos campos descritos, no conjunto de dados deduplicados;</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1592603622353_329942880","id":"20200619-185342_260996413","dateCreated":"2020-06-19T18:53:42-0300","dateStarted":"2020-06-21T02:33:19-0300","dateFinished":"2020-06-21T02:33:20-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20791"},{"text":"%md\n### Lendo arquivo com dados deduplicados","user":"anonymous","dateUpdated":"2020-06-21T02:33:20-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Lendo arquivo com dados deduplicados</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592605604372_410804483","id":"20200619-192644_693230075","dateCreated":"2020-06-19T19:26:44-0300","dateStarted":"2020-06-21T02:33:20-0300","dateFinished":"2020-06-21T02:33:20-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20792"},{"text":"%spark.pyspark\npath_input_3 = path_output_2\nusers_deduplicated_parquet_DF = spark.read.load(path_input_3,format=\"parquet\")\nusers_deduplicated_parquet_DF.show(truncate=False)\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:20-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|id |name                 |phone          |address                                       |age|create_date            |update_date            |\n+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|3  |Spongebob Squarepants|(11) 98765-4321|122 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 05:08:07.964|\n|1  |David Lynch          |(11) 99999-9999|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-05-23 10:13:59.594|\n|2  |Sherlock Holmes      |(11) 94815-1623|221B Baker Street, London, UK                 |34 |2018-04-21 20:21:24.364|2018-04-21 20:21:24.364|\n+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592605672853_725083847","id":"20200619-192752_1641445269","dateCreated":"2020-06-19T19:27:52-0300","dateStarted":"2020-06-21T02:33:21-0300","dateFinished":"2020-06-21T02:33:22-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20793"},{"text":"%md\n### Transformando o schema do Dataframe em um dicionário python","user":"anonymous","dateUpdated":"2020-06-21T02:33:22-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Transformando o schema do Dataframe em um dicionário python</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592603958747_1439297931","id":"20200619-185918_963089001","dateCreated":"2020-06-19T18:59:18-0300","dateStarted":"2020-06-21T02:33:23-0300","dateFinished":"2020-06-21T02:33:23-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20794"},{"text":"%spark.pyspark\nfrom pyspark.sql.types import StructType    \nimport json\n\n# Schema inferido pelo Spark\nusers_deduplicated_parquet_DF.printSchema()\nstr_users_schema = users_deduplicated_parquet_DF.schema.json()\n\n# print(type(str_users_schema))\n# print(str_users_schema)\n\nacceptable_str_users_schema = str_users_schema.replace(\"'\", \"\\\"\")\ndict_users_schema = json.loads(acceptable_str_users_schema)\n\nprint(type(dict_users_schema))\nprint(dict_users_schema)\n\n\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:23-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: integer (nullable = true)\n |-- name: string (nullable = true)\n |-- phone: string (nullable = true)\n |-- address: string (nullable = true)\n |-- age: integer (nullable = true)\n |-- create_date: timestamp (nullable = true)\n |-- update_date: timestamp (nullable = true)\n\n<class 'dict'>\n{'fields': [{'metadata': {}, 'name': 'id', 'nullable': True, 'type': 'integer'}, {'metadata': {}, 'name': 'name', 'nullable': True, 'type': 'string'}, {'metadata': {}, 'name': 'phone', 'nullable': True, 'type': 'string'}, {'metadata': {}, 'name': 'address', 'nullable': True, 'type': 'string'}, {'metadata': {}, 'name': 'age', 'nullable': True, 'type': 'integer'}, {'metadata': {}, 'name': 'create_date', 'nullable': True, 'type': 'timestamp'}, {'metadata': {}, 'name': 'update_date', 'nullable': True, 'type': 'timestamp'}], 'type': 'struct'}\n"}]},"apps":[],"jobName":"paragraph_1592603204270_-669716500","id":"20200619-184644_1900049694","dateCreated":"2020-06-19T18:46:44-0300","dateStarted":"2020-06-21T02:33:23-0300","dateFinished":"2020-06-21T02:33:24-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20795"},{"text":"%md\n### Lendo o arquivo *types_mapping.json* com os tipos de alguns campos\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:24-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Lendo o arquivo <em>types_mapping.json</em> com os tipos de alguns campos</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592715787730_-1583088108","id":"20200621-020307_1669531348","dateCreated":"2020-06-21T02:03:07-0300","dateStarted":"2020-06-21T02:33:26-0300","dateFinished":"2020-06-21T02:33:26-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20796"},{"text":"%spark.pyspark\nwith open('C:\\\\Projetos\\\\teste_cognitivo_ai\\\\config\\\\types_mapping.json', 'r') as file:  \n    types_mapping = json.load(file)\n    print(type(types_mapping))\n    print(types_mapping)\n    \n","user":"anonymous","dateUpdated":"2020-06-21T02:33:26-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<class 'dict'>\n{'age': 'integer', 'create_date': 'timestamp', 'update_date': 'timestamp'}\n"}]},"apps":[],"jobName":"paragraph_1592605347008_-951910170","id":"20200619-192227_1796161703","dateCreated":"2020-06-19T19:22:27-0300","dateStarted":"2020-06-21T02:33:27-0300","dateFinished":"2020-06-21T02:33:28-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20797"},{"text":"%md\n### Iterando o dicionário de dados do schema original e alterando com os valores definidos no arquivo *types_mapping.json*\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:28-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Iterando o dicionário de dados do schema original e alterando com os valores definidos no arquivo <em>types_mapping.json</em></h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592716023457_-1299794575","id":"20200621-020703_1993713754","dateCreated":"2020-06-21T02:07:03-0300","dateStarted":"2020-06-21T02:33:29-0300","dateFinished":"2020-06-21T02:33:29-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20798"},{"text":"%spark.pyspark\n\nfor dict in dict_users_schema[\"fields\"]:\n    print(dict)\n    if dict[\"name\"] in types_mapping.keys():\n        dict[\"type\"] = types_mapping[dict[\"name\"]]\n        #print(dict[\"name\"], '->', dict[\"type\"])\n\nprint(\"*******schema dict changed*******\")\n\nfor dict in dict_users_schema[\"fields\"]:\n    print(dict)\n\n    \n","user":"anonymous","dateUpdated":"2020-06-21T02:33:29-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{'metadata': {}, 'name': 'id', 'nullable': True, 'type': 'integer'}\n{'metadata': {}, 'name': 'name', 'nullable': True, 'type': 'string'}\n{'metadata': {}, 'name': 'phone', 'nullable': True, 'type': 'string'}\n{'metadata': {}, 'name': 'address', 'nullable': True, 'type': 'string'}\n{'metadata': {}, 'name': 'age', 'nullable': True, 'type': 'integer'}\n{'metadata': {}, 'name': 'create_date', 'nullable': True, 'type': 'timestamp'}\n{'metadata': {}, 'name': 'update_date', 'nullable': True, 'type': 'timestamp'}\n*******schema dict changed*******\n{'metadata': {}, 'name': 'id', 'nullable': True, 'type': 'integer'}\n{'metadata': {}, 'name': 'name', 'nullable': True, 'type': 'string'}\n{'metadata': {}, 'name': 'phone', 'nullable': True, 'type': 'string'}\n{'metadata': {}, 'name': 'address', 'nullable': True, 'type': 'string'}\n{'metadata': {}, 'name': 'age', 'nullable': True, 'type': 'integer'}\n{'metadata': {}, 'name': 'create_date', 'nullable': True, 'type': 'timestamp'}\n{'metadata': {}, 'name': 'update_date', 'nullable': True, 'type': 'timestamp'}\n"}]},"apps":[],"jobName":"paragraph_1592711115940_-1132334231","id":"20200621-004516_443678302","dateCreated":"2020-06-21T00:45:16-0300","dateStarted":"2020-06-21T02:33:29-0300","dateFinished":"2020-06-21T02:33:30-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20799"},{"text":"%md\n### Aplicando o novo schema\nConverti o schema alterado, de formato Dicionário para String e finalmente em StrutType. Após isso, recarreguei o Dataframe gerado na saída 2 já usando o novo schema alterado. \nObs.: Os tipos definidos no arquivo e os tipos inferidos pelo Spark foram os mesmos. Como comprovação que o schema original foi alterado, pode-se editar os tipos no arquivo json disponibilizado para *string* e verá que os tipos são carregados desta origem.\n","user":"anonymous","dateUpdated":"2020-06-21T02:41:36-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Aplicando o novo schema</h3>\n<p>Converti o schema alterado, de formato Dicionário para String e finalmente em StrutType. Após isso, recarreguei o Dataframe gerado na saída 2 já usando o novo schema alterado.<br/>Obs.: Os tipos definidos no arquivo e os tipos inferidos pelo Spark foram os mesmos. Como comprovação que o schema original foi alterado, pode-se editar os tipos no arquivo json disponibilizado para <em>string</em> e verá que os tipos são carregados desta origem.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1592716490066_-551651842","id":"20200621-021450_264129933","dateCreated":"2020-06-21T02:14:50-0300","dateStarted":"2020-06-21T02:41:36-0300","dateFinished":"2020-06-21T02:41:37-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20800"},{"text":"%spark.pyspark\nusers_saved_schema_str = json.dumps(dict_users_schema)\nnew_users_saved_schema = StructType.fromJson(json.loads(users_saved_schema_str))\nprint(new_users_saved_schema)\n\nnew_users_df = spark.read.load(path_input_3,format=\"parquet\", schema=new_users_saved_schema)\nusers_deduplicated_parquet_DF.printSchema()\nprint(\"*******schema changed*******\")\nnew_users_df.printSchema()\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:31-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"StructType(List(StructField(id,IntegerType,true),StructField(name,StringType,true),StructField(phone,StringType,true),StructField(address,StringType,true),StructField(age,IntegerType,true),StructField(create_date,TimestampType,true),StructField(update_date,TimestampType,true)))\nroot\n |-- id: integer (nullable = true)\n |-- name: string (nullable = true)\n |-- phone: string (nullable = true)\n |-- address: string (nullable = true)\n |-- age: integer (nullable = true)\n |-- create_date: timestamp (nullable = true)\n |-- update_date: timestamp (nullable = true)\n\n*******schema changed*******\nroot\n |-- id: integer (nullable = true)\n |-- name: string (nullable = true)\n |-- phone: string (nullable = true)\n |-- address: string (nullable = true)\n |-- age: integer (nullable = true)\n |-- create_date: timestamp (nullable = true)\n |-- update_date: timestamp (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1592705037802_-1132379924","id":"20200620-230357_1481727738","dateCreated":"2020-06-20T23:03:57-0300","dateStarted":"2020-06-21T02:33:32-0300","dateFinished":"2020-06-21T02:33:32-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20801"},{"text":"%md\n### Salvando o Dataframe no formato final\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:32-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Salvando o Dataframe no formato final</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1592717171806_-1792691891","id":"20200621-022611_470043561","dateCreated":"2020-06-21T02:26:11-0300","dateStarted":"2020-06-21T02:33:33-0300","dateFinished":"2020-06-21T02:33:33-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20802"},{"text":"%spark.pyspark\npath_output_3 = 'C:\\\\Projetos\\\\teste_cognitivo_ai\\\\data\\\\output\\\\3'\nnew_users_df.write.parquet(path_output_3)\nnew_users_df.printSchema()\nnew_users_df.show(truncate=False)\n","user":"anonymous","dateUpdated":"2020-06-21T02:36:38-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: integer (nullable = true)\n |-- name: string (nullable = true)\n |-- phone: string (nullable = true)\n |-- address: string (nullable = true)\n |-- age: integer (nullable = true)\n |-- create_date: timestamp (nullable = true)\n |-- update_date: timestamp (nullable = true)\n\n+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|id |name                 |phone          |address                                       |age|create_date            |update_date            |\n+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n|3  |Spongebob Squarepants|(11) 98765-4321|122 Conch Street, Bikini Bottom, Pacific Ocean|13 |2018-05-19 04:07:06.854|2018-05-19 05:08:07.964|\n|1  |David Lynch          |(11) 99999-9999|Mulholland Drive, Los Angeles, CA, US         |72 |2018-03-03 18:47:01.954|2018-05-23 10:13:59.594|\n|2  |Sherlock Holmes      |(11) 94815-1623|221B Baker Street, London, UK                 |34 |2018-04-21 20:21:24.364|2018-04-21 20:21:24.364|\n+---+---------------------+---------------+----------------------------------------------+---+-----------------------+-----------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592706912827_696301784","id":"20200620-233512_1566057281","dateCreated":"2020-06-20T23:35:12-0300","dateStarted":"2020-06-21T02:36:38-0300","dateFinished":"2020-06-21T02:36:45-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20803"},{"text":"%spark.pyspark\n","user":"anonymous","dateUpdated":"2020-06-21T02:33:39-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592717291273_-812976601","id":"20200621-022811_475867180","dateCreated":"2020-06-21T02:28:11-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20804"}],"name":"cognitivo_ai/teste_tecnico","id":"2FD96K19K","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}